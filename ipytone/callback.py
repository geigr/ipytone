class BaseCallbackArg:
    """Base class internally used as a placeholder for any tone event or
    scheduling callback argument.

    """

    def __init__(self, caller, value=None):
        self.caller = caller
        self.value = value
        self._parent = None
        self._disposed = False
        self._items = []

    def derive(self, value):
        """Return a new, derived placeholder, which may holds a different value
        but still references items from the current placeholder.

        """
        new_obj = type(self)(self.caller, value=value)
        new_obj._disposed = self._disposed
        new_obj._parent = self
        return new_obj

    @property
    def items(self):
        """Returns the list of messages used to re-build an
        ipytone scheduled callback in the front-end.

        Each item consists of a single call event message data.

        The list returned here contains all items related to a callback,
        including call events where this argument is not used.

        """
        if self._disposed:
            raise RuntimeError(
                f"Callback argument placeholder {self!r} is used outside of its context."
            )

        items = self._items

        parent = self._parent
        while parent is not None:
            items = parent._items
            parent = parent._parent

        return items

    def __repr__(self):
        return f"{type(self).__name__}(value={self.value!r})"


class TimeCallbackArg(BaseCallbackArg):
    """Emulates the `time` argument of all Tone scheduling callbacks.

    It has limited support for arithmetic operations.

    TODO: add more arithmetic operators

    """

    def __init__(self, *args, value="time", **kwargs):
        super().__init__(*args, value=value, **kwargs)

    def _normalize_value(self, value):
        if isinstance(value, TimeCallbackArg):
            return value.value
        else:
            # force converting any given value to seconds in the front-end
            # TODO: escape value to prevent any abuse in the front-end
            return f"this.toSeconds({value!r})"

    def __add__(self, other):
        return self.derive(f"{self.value} + {self._normalize_value(other)}")


class EventValueCallbackArg(BaseCallbackArg):
    """Emulates the second (value) argument of Tone Event callbacks.

    Unlike in Tone.js, the value object attributes cannot be arbitrary.
    Supported attributes are:

    - note
    - velocicty
    - duration (value must be in seconds)

    """

    def __init__(self, *args, value="value", **kwargs):
        super().__init__(*args, value=value, **kwargs)

    @property
    def note(self):
        return self.derive(str(self.value) + ".note")

    @property
    def velocity(self):
        return self.derive(str(self.value) + ".velocity")

    @property
    def duration(self):
        return self.derive(str(self.value) + ".duration")


def add_or_send_event(method, callee, args, event="trigger"):
    """Either add a specific call event (i.e., Tone object method call + args)
    for further scheduling or send it directly to the front-end.

    ``args`` is a dictionary that may contain raw argument values or argument
    placeholders (i.e., instances of `BaseCallbackArg`)

    - If ``args`` contains at least one placeholder, the call event is assumed
      being scheduled within an ipytone scheduled callback. Each placeholder is
      replaced by the value it holds, before attaching the event's whole message
      data to every placeholder. Those messages will be later sent to the
      front-end by a scheduler widget (e.g., :class:`ipytone.Transport`,
      :class:`ipytone.Event`, etc.), they contain everything needed to re-build
      the callback in the front-end (including the ``callee`` widget model id
      for easy access to that widget).

    - Otherwise, the message data is sent directly to the front-end by the
      ``callee`` widget.

    """
    decoded_args = {}
    callback_args = []
    for name, arg in args.items():
        if isinstance(arg, BaseCallbackArg):
            callback_args.append(arg)
            decoded_args[name] = {"value": arg.value, "eval": True}
        else:
            decoded_args[name] = {"value": arg, "eval": False}

    data = {"method": method, "args": decoded_args, "arg_keys": list(args.keys())}

    if len(callback_args):
        data["callee"] = callee.model_id
        for ca in callback_args:
            ca.items.append(data)
    else:
        data["event"] = event
        callee.send(data)


def collect_and_merge_items(*clb_args):
    """Return a single list of items from one or more callback arguments,
    preserving order.

    Within callbacks that accepts multiple arguments, the items generated by
    subsequent calls with argument placeholders may appears more than once,
    i.e., for calls that include at least two of those placeholders. This util
    function removes the duplicate item entries.

    """
    items = []
    for arg in clb_args:
        for item in arg.items:
            if item not in items:
                items.append(item)
    return items
